# -*- coding: utf-8 -*-
"""Code_Net_Challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_PBpB4xLxanpzAJaT0qKcs0-VqLkASu
"""

#Create Word_Embedding
#Get the word2vec of a doc_string
#Apply K-Means Clustering to cluster around similar topic

#Get the human query 
#Convert into word2vec
#Check the nearest cluster
#Retrieve the code from most similar doc string

#--------------------------------
#Generate Topic from the doc_string using Topic Modelling
#Get human query
#Undergo the topic is related to
#Apply semantics to match the score and return the code snippet

import json

import pandas as pd
from pathlib import Path
pd.set_option('max_colwidth',300)
from pprint import pprint

!wget https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/python.zip

!unzip python.zip

python_files = sorted(Path('/content/python/final/jsonl/train/').glob('**/*.gz'))

columns_long_list = ['repo', 'path', 'url', 'code', 
                     'code_tokens', 'docstring', 'docstring_tokens', 
                     'language', 'partition']

columns_short_list = ['code_tokens', 'docstring_tokens', 
                      'language', 'partition']

def jsonl_list_to_dataframe(file_list, columns=columns_long_list):
    """Load a list of jsonl.gz files into a pandas DataFrame."""
    return pd.concat([pd.read_json(f, 
                                   orient='records', 
                                   compression='gzip',
                                   lines=True)[columns] 
                      for f in file_list], sort=False)

pydf = jsonl_list_to_dataframe(python_files)

import re

def cleaningData(lst):

  clean_words = []
  for l in lst:
    l = re.sub(r'\W+','',l)
    clean_words.append(l.lower())

  return ' '.join(clean_words) 


pydf['clean_docstring_tokens'] = pydf['docstring_tokens'].apply(lambda x:cleaningData(x))

all_text = '.'.join(pydf['clean_docstring_tokens'])

fp = open('Doc_strings_text.txt','w',encoding='utf-8')
fp.write(all_text)
fp.close()

pydf.to_csv('CodeNetDataFrame.csv',header=True)